---
title: "Millipedes SIP"
subtitle: "05 SIP differential abundance modelling: comparing within gradients"
author: "Roey Angel"
email: "roey.angel@bc.cas.cz"
date: "`r Sys.Date()`"
bibliography: references.bib
link-citations: true
csl: fems-microbiology-ecology.csl
always_allow_html: true
output:
  rmarkdown::github_document:
    toc: true
    toc_depth: 5
    number_sections: false
    dev: "png"
    df_print: "kable"
    keep_html: true
editor_options: 
  chunk_output_type: console
---

```{r setup}
.libPaths(c("/home/nwezejus/R/x86_64-pc-linux-gnu-library/4.5.1", .libPaths()))
```


```{r}
#| label = "libraries",
#| include = F,
#| message = FALSE,
#| warning = FALSE
# .libPaths(c('~/R/library', .libPaths())) # Uncomment if you have no write access to R path
library(extrafont) # Tools for using fonts, CRAN v0.17
library(tidyverse) # Easily Install and Load the 'Tidyverse', CRAN v1.3.0 
library(magrittr) # A Forward-Pipe Operator for R, CRAN v2.0.1 
library(scales) # Scale Functions for Visualization, CRAN v1.1.1 
library(paletteer) # Comprehensive Collection of Color Palettes, [github::EmilHvitfeldt/paletteer] v1.5.0.9000 
library(svglite) # An 'SVG' Graphics Device, CRAN v1.2.3.2 
library(viridis) # Default Color Maps from 'matplotlib', CRAN v0.5.1
library(ggsci) # Scientific Journal and Sci-Fi Themed Color Palettes for 'ggplot2', CRAN v2.9
library(ggtext) # Improved Text Rendering Support for 'ggplot2', CRAN v0.1.1
library(kableExtra) # Construct Complex Table with 'kable' and Pipe Syntax, CRAN v1.3.1 
library(visdat) # Preliminary Visualisation of Data, CRAN v0.5.3
library(parallel) # Support for Parallel computation in R, CRAN v4.0.3
library(glue) # Interpreted String Literals, CRAN v1.4.2
library(ashr) # implements an Empirical Bayes approach for large-scale hypothesis testing and false discovery rate
library(patchwork) # The Composer of Plots, CRAN v1.1.1
library(vegan) # Community Ecology Package, CRAN v2.5-7
library(phyloseq) # Handling and analysis of high-throughput microbiome census data, Bioconductor v1.32.0 
library(speedyseq) # Faster implementations of phyloseq functions, [github::mikemc/speedyseq] v0.4.0 
library(Biostrings) # Efficient manipulation of biological strings, Bioconductor v2.56.0 
library(HTSSIP) # High Throughput Sequencing of Stable Isotope Probing Data Analysis, CRAN v1.4.1 
library(DESeq2) # Differential gene expression analysis based on the negative binomial distribution, Bioconductor v1.28.1 
library(ggtree) # an R package for visualization of tree and annotation data, Bioconductor v2.2.4  # don't load here because of conflict with phyloseq
library(ANCOMBC) # Microbiome differential abudance and correlation analyses with bias correction, Bioconductor v2.0.2 
```

```{r}
#| label = "style settings",
#| echo = F,
#| message = F,
#| warning = F,
#| results = "asis",
#| cache = T
options(width = 90, knitr.table.format = "html") 
cache.path <- "05_SIP_diff_abund_within_cache/"
fig.path <- "05_SIP_diff_abund_within_figures/"
knitr::opts_chunk$set(
  warning = FALSE,
  message = FALSE,
  cache = TRUE,
  dev = c("svglite", "ragg_png"),
  dev.args = list(svglite = list(bg = 'white', fix_text_size = FALSE), ragg_png = list(bg = 'white')),
  dpi = 300,
  #  fig.width = 12,
  #  fig.height = 8,
  cache.path = cache.path,
  fig.path = fig.path
)
f_name <- "DejaVu Sans" #sub("\\s//", "", f_name)
f_size <- 12
font_import(pattern = "DejaVuSans\\.", prompt = FALSE)
loadfonts() # registers fonts
theme_set(theme_bw(base_size = f_size, base_family = f_name))
```

```{r}
#| label = "functions",
#| include = F

plot_SIP_fractions <- function(qPCR_df, x = "Density..g.ml.1.", y = "qPCR_fraction", colour = "Replicate", group = "Label..13C.", facet.arg1 = "Day", facet.arg2 = "Species",
                             xticks = seq(1.71, 1.85, 0.02), yticks = seq(0, 80, 10)){
  ggplot(qPCR_df, aes(x = !!sym(x), y = !!sym(y))) + 
    geom_point(aes(colour = as.factor(!!sym(colour)), shape = !!sym(group)), size = 3, alpha = 1/2) +
    geom_line(aes(colour = as.factor(!!sym(colour)), shape = !!sym(group)), alpha = 1/2, show_guide = F) +
    facet_grid(reformulate(facet.arg1, facet.arg2), scale = 'free') +
    scale_color_manual(values = paletteer_d("ggpomological::pomological_palette")[c(2, 4, 3, 1, 5:9)][1:nrow(unique(qPCR_df[colour]))]) +
    labs(x = "Density (g ml<sup>-1</sup>)", y = "16S rRNA copies (%)") +
    scale_y_continuous(breaks = yticks) +
    scale_x_continuous(breaks = xticks, labels = format(xticks, nsmall = 2, scientific = FALSE)) +
    guides(colour = guide_legend(title = "Replicate"),
         shape = guide_legend(title = "<sup>13</sup>C label")) +
    theme(axis.text.x = element_markdown(size = f_size,
                                         angle = 45, 
                                         vjust = 1, 
                                         hjust = 1),
          axis.title.y = element_markdown(size = f_size),
          axis.title.x = element_markdown(size = f_size),
          strip.text.y =  element_textbox(size = f_size, orientation = "right-rotated"),
          legend.title = element_markdown(size = f_size),
          legend.text = element_markdown(size = f_size))
}

#' gz
#' Compress a file using gz and delete the uncompressed file
#'
#' @param in_path (Required) Path and file name of a file to be compressed
#'
#' @param out_path (Required) Path and file name of the compressed file
#'
#' @author Roey Angel
#'
#' @return none
#'
#' @usage gz(paste0(file.path, ".svg"), paste0(file.path, ".svgz"))
#' @export

gz <- function(in_path, out_path = tempfile()) {
  out <- gzfile(out_path, "w")
  writeLines(readLines(in_path), out)
  close(out)

  file.remove(in_path)
  invisible(out_path)
}

#' Save a plot to svgz and png
#' The function uses `svglite` and `agg_png` devices and then comresses the svg to an svgz
#'
#' @param filename (Required) Path and file name excluding suffix (Default: "Rplot")
#'
#' @param plot (Required) Plot to save, defaults to last plot displayed
#'
#' @param scale (Optional) Multiplicative scaling factor (Default: 1)
#' 
#' @param pwidth, @param pheight (Optional) Plot size in "in" (Defaults: 10, 8)
#'
#' @param dpi (Optional) Plot resolution (Default: 300)
#'
#' @author Roey Angel
#'
#' @return none
#'
#' @usage save_figure(filename = "Rplot", 
#'                        plot = last_plot(), 
#'                        pwidth = 10, 
#'                        pheight = 8, 
#'                        dpi = 300, 
#'                        scale = 1, 
#'                        bg = "white",
#'                        pointsize = 12)
#' @export

save_figure <- function(filename = "Rplot", 
                        plot = last_plot(), 
                        pwidth = 10, 
                        pheight = 8, 
                        dpi = 300, 
                        scale = 1, 
                        bg = "white",
                        pointsize = 12) {
  require(svglite)
  require(ragg)
  
  svglite(paste0(filename, ".svg"), 
          width = pwidth, 
          height = pheight)
  print(plot)
  invisible(dev.off())
  
  agg_png(paste0(filename, ".png"),
          width = pwidth, 
          height = pheight, 
          units = "in",
          res = dpi, 
          scaling = scale)
  print(plot)
  invisible(invisible(dev.off()))
  
  gz(paste0(filename, ".svg"), paste0(filename, ".svgz"))
}

#' scale_libraries
#'
#' Scales libraries by:
#' 1) Taking proportions
#' 2) Multiplying by a given library size of n
#' 3) Rounding
#'
#' @param ps_obj (Required) A phyloseq object
#'
#' @param n (Optional) Library size to scale to (Default: min(sample_sums(physeq)))
#'
#' @param round (Optional) Rounding method. Either "floor" (default) or "round"
#'
#' @author https://github.com/DenefLab/MicrobeMiseq/blob/master/R/miseqR.R
#' @return A phyloseq objectn ordered data frame with the columns: ASV names, taxonomic rank names and abundance
#' @usage scale_libraries(Ps_obj, n = min(sample_sums(physeq)), round = "floor")
#' @export
#'
#'

#' plot_lib_dist
#' Plot distribution of amplicon library sizes as a histogram
#'
#' @param Ps_obj (Required) A phyloseq object
#'
#' @author Roey Angel (https://github.com/roey-angel)
#' @return A ggplot object
#' @usage plot_lib_dist(Ps_obj)
#' @export

plot_lib_dist <- function(Ps_obj){
  require(ggplot2)
  require(scales)
  data.frame(sum = sample_sums(Ps_obj)) %>%
  ggplot(aes(x = sum)) +
    geom_histogram(color = "black",
                   fill = "indianred") +
    theme(panel.grid.minor = element_blank()) +
    labs(x = "Library size" , y = "Sample count") ->
    lib_dist_plot
  return(lib_dist_plot)
}

scale_libraries <- function(physeq, n = min(sample_sums(physeq)), round = "floor") {
  require(phyloseq)

  # Transform counts to n
  physeq.scale <- transform_sample_counts(physeq,
    function(x) {(n * x/sum(x))}
  )

  # Pick the rounding functions
  if (round == "floor") {
    otu_table(physeq.scale) <- floor(otu_table(physeq.scale))
  } else if (round == "round") {
    otu_table(physeq.scale) <- round(otu_table(physeq.scale), digits = 0)
  }

  # Prune taxa and return new phyloseq object
  physeq.scale <- prune_taxa(taxa_sums(physeq.scale) > 0, physeq.scale)
  return(physeq.scale)
}

#' filter_ASVs_by_prevalence
#' Filter ASVs by count number and presence in a phyloseq object
#'
#' @author Roey Angel (https://github.com/roey-angel)
#' @usage filter_ASVs_by_prevalence(ps_obj, abund = 10, prev = 6)
#' @param ps (Required). A phyloseq object that has sample indices.
#'
#' @param test_condition (Required). A single character string matching a variable name in
#' the corresponding sample_data of \code{ps}.
#'
#' @param ref_level (Required). A single character string to be set as the reference level for DESeq2 (must be a factor level of test_condition)
#'
#' @return A DESeq2 object
#'
#' @seealso \code{\link{phyloseq::phyloseq_to_deseq2}}
#'
#' @export
#' 
filter_ASVs_by_prevalence <- function (ps = ps_obj, abund = 10, prev = 6) {
  # Filter ASVs by count number and presence in a phyloseq object
  trans <- FALSE
  if(taxa_are_rows(ps)) {
    trans <- TRUE
    ps <- t(ps)}
  
  otu_tab <- as(otu_table(ps), "matrix")
  keep <- colSums(otu_tab >= abund) >= prev
  print(keep)
  otu_tab <- otu_tab[, keep]
  otu_table(ps) <- otu_table(otu_tab, taxa_are_rows = FALSE)
  if(trans) {ps <- t(ps)}
  return(ps)
}


#' phyloseq_to_tse_safe
#' A wrapper for  mia::makeTreeSummarizedExperimentFromPhyloseq() but ensures that the right reference level is used
#'
#' makeTreeSummarizedExperimentFromPhyloseq() converts a phyloseq object to a tse object. However for this allows making sure the right reference level is used for ANCOM-BC and just the first on the alphabet.
#'
#' @author Roey Angel (https://github.com/roey-angel)
#' @usage phyloseq_to_tse_safe(ps_obj, , test_condition = "Density.zone", ref_level = "Light")
#' @param ps (Required). A phyloseq object that has sample indices.
#'
#' @param test_condition (Required). A single character string matching a variable name in
#' the corresponding sample_data of \code{ps}.
#'
#' @param ref_level (Required). A single character string to be set as the reference level for DESeq2 (must be a factor level of test_condition)
#'
#' @return A DESeq2 object
#'
#' @seealso \code{\link{mia::makeTreeSummarizedExperimentFromPhyloseq}
#'
#' @export

## TODO:
phyloseq_to_tse_safe <- function(ps = ps_obj, test_condition = "Density.zone", ref_level = "Light") {
  require(magrittr)
  require(forcats)
  require(phyloseq)

  # critical for DESeq2 that the reference is the first level!!
  sample_data(ps)[[test_condition]] %<>% fct_relevel(., ref_level)
  mia::makeTreeSummarizedExperimentFromPhyloseq(ps) %>%
    return(.)
}


mark_rare_taxa <- function(ps_obj, rank = "Phylum", rare_thresh = 0.01){
  require(dplyr)
  require(phyloseq)
  require(speedyseq)
  
  # glomerate to the "Rank" level
  ps_obj_glom <- tax_glom(ps_obj, 
                          rank, 
                          NArm = TRUE) 
  
  ps_obj_glom_rel <- transform_sample_counts(ps_obj_glom, 
                                             function(x) x / sum(x)) # transform to rel. ab.
  
  # convert to df
  ps_obj_df <- speedyseq::psmelt(ps_obj_glom_rel) # generate a df
  ps_obj_df %<>%
    mutate(Rank = as.character(!!sym(rank)))
   
  # group dataframe by Phylum, calculate sum rel. abundance
  ps_obj_df %>%
    group_by(!!sym(rank)) %>%
    summarise(Sum = sum(Abundance) / nsamples(ps_obj)) %>% 
    filter(Sum < rare_thresh) %>% # find Taxa whose mean rel. abund. is less than thresh
    pull(rank) -> 
    Rare_phyla 
  
  # change their name to "Rare"
  tax_table(ps_obj) %<>% 
    as.data.frame() %>%  
    rownames_to_column("ASV") %>% 
    mutate(across(rank, 
                  ~if_else(!!sym(rank) %in% Rare_phyla, "Rare", !!sym(rank)))) %>% 
    column_to_rownames("ASV") %>% 
    as.matrix() %>% 
    tax_table()
    return(ps_obj)
}

order_taxa <- function(ps_obj, rank = "Phylum", rel_abund = TRUE){
  require(dplyr)
  require(phyloseq)
  require(speedyseq)
  
  ps_obj %>%
    tax_glom(taxrank = rank) %>%                     # agglomerate at 'Rank' level
    {if(rel_abund) transform_sample_counts(., function(x) x / sum(x)) else .} %>% # convert to rel abundance 
    psmelt() %>%                                        # Melt to long format
    arrange(rank) %>%                                  # arrange by 'Rank'
    group_by(across(rank)) %>% 
    summarise(Abundance = sum(Abundance)) %>%
    arrange(desc(Abundance)) %>% 
    mutate(across(rank, ~factor(., levels = fct_inorder(.)))) %>%  
    mutate(across(rank, ~fct_relevel(., "Rare", after = Inf))) ->
    Taxa_order 
  
  return(Taxa_order)
}

prep_ANCOMBC_data <- function(ANCOMBC_results, ps_obj, rank = "Phylum", rare_thresh = 0.0045, prev_thresh = 2) {
  require(dplyr)
  require(magrittr)
  require(phyloseq)
  
  if (!is.list(ANCOMBC_results)) {ANCOMBC_results <- list(ANCOMBC_results)} # convert to list if it is not (to support a vectorised run of DESEq2)
  
  # mark rare phyla
  ps_obj %>% 
    mark_rare_taxa(., rank = rank, rare_thresh = rare_thresh) -> 
    ps_obj
  
  # group dataframe by ASV, calculate median rel. abundance
  ps_obj %>%
    transform_sample_counts(., function(x) x / sum(x) * 100) %>% 
    taxa_sums(.) %>% 
    map_dbl(~(.x / nsamples(ps_obj))) %>% 
    enframe(name = "ASV", value = "Mean abundance (%)") -> 
    baseMean
  
  Taxa_order <- order_taxa(ps_obj)

  ANCOMBC_results[[1]] %>% 
    as.data.frame() %>% 
    left_join(., baseMean, by = "ASV") %>% # add mean abundance to results table
    bind_cols(., as(tax_table(ps_obj)[taxa_names(ps_obj) %in% .$ASV, ], "data.frame")) %>% # add taxnomy
    mutate(across(rank, ~factor(., levels = levels(Taxa_order$Phylum)))) %>%  # order taxa by abundance
    mutate(ymin = if_else(Significant == "TRUE", log2FoldChange - lfcSE, NA_real_),
           ymax = if_else(Significant == "TRUE", log2FoldChange + lfcSE, NA_real_)) -> # add error
    ANCOMBC2plot

  return(ANCOMBC2plot)
}

plot_ANCOMBC <- function(ANCOMBC_results, ps_obj, rank = "Phylum", rare_thresh = 0.0045, sig_level = alpha_thresh, ASV_labels = FALSE, Y_val = "log2FoldChange", plot_title = "") {
  require(ggplot2)
  require(ggrepel)
  require(ggtext)
  # ASV_labels don't plot properly
  
  ANCOMBC2plot <- prep_ANCOMBC_data(ANCOMBC_results, ps_obj, rank, rare_thresh)
  
  ANCOMBC_summary <- tibble(Label = c(paste0("⬆", 
                                           sum(ANCOMBC2plot$log2FoldChange > 0 & 
                                                 ANCOMBC2plot$Significant == "TRUE"),
                                           " (", nrow(ANCOMBC2plot), ")")))
  
  pos <- position_jitter(width = 0.3, seed = 1)
  
  p <-
    ggplot(ANCOMBC2plot) +
    geom_point(aes(
      x = !!sym(rank),
      y = !!sym(Y_val),
      colour = !!sym("Significant"),
      size = !!sym("Mean abundance (%)")),
      position = pos,
      alpha = 1 / 3,
      stroke = 0) +
    geom_linerange(aes(x = !!sym(rank),
                       y = !!sym(Y_val),
                       ymin = ymin,
                       ymax = ymax,
                       colour = !!sym("Significant")),
                   position = pos,
                   alpha = 1/5, 
                   show.legend = FALSE) +
    geom_text(
      data    = ANCOMBC_summary,
      mapping = aes(x = Inf, y = Inf, label = Label),
      hjust   = 1.1,
      vjust   = 1.6
    ) +
    labs(x = "", y = "Log<sub>2</sub> fold change", title = plot_title) +
    labs(colour = paste("Significant at \n p <", sig_level), size = "Mean abundance (%)") +
    theme_grey(base_size = f_size, base_family = f_name) +
    theme(axis.text.x = element_text(angle = 45.0, vjust = 1, hjust = 1),
          panel.grid.major.x = element_blank(),
          panel.grid.minor.x = element_blank(),
          axis.title.y = element_markdown(),
          plot.title = element_markdown(size = f_size)) +
    guides(colour = guide_legend(override.aes = list(size = 5))) +
    # scale_colour_manual(values = c(ggpomological:::pomological_base[[7]], ggpomological:::pomological_palette[[1]])) +
    scale_colour_manual(values = c("#2b323f", "#c03728")) +
    scale_size_continuous(name = "Mean abundance (%)",
                          range = c(2, 8),
                          breaks = c(round(seq(min(ANCOMBC2plot$`Mean abundance (%)`), max(ANCOMBC2plot$`Mean abundance (%)`), length.out = 5), 1)))
  
  if (ASV_labels) {
    p <- p + geom_label_repel(
      aes(x = !!sym(rank), y = !!sym(Y_val)),
      size = 6,
      label = sub("Seq_([0-9]+)", "\\1", pull(ANCOMBC2plot[ANCOMBC2plot$Significant == "TRUE", ], "ASV")),
      position = pos,
      data = ANCOMBC2plot[ANCOMBC2plot$Significant == "TRUE", ],
      # nudge_x = 0.4,
      colour = "#4a4a4a",
      label.size = NA, 
      alpha = 0.75, 
      # fontface = 'bold',
      box.padding = 0.80,
      point.padding = 0.5
    )
  }
  return(p)
}

plot_otus_by_density <- function(ps_obj = Ps_obj_SIP_noTime_l[[1]], 
                                 ASV2plot = filter(DESeq_res_SIP_byTime_LFC_sig_df, 
                                                   Species == "Epibolus pulchripes"),
                                 ASV_colours = ggpomological:::pomological_palette[c(2, 4, 3, 1)],
                                 X_val = "Density..g.ml.1.", 
                                 Y_val = "Abundance", 
                                 shape_val = "Label..13C.",
                                 colour_val = "Day",
                                 topN = 30){
  require(ggpomological)
  require(dplyr)
  require(phyloseq)
  require(speedyseq)
  
  ps_obj %>% 
    transform_sample_counts(function(x) x/sum(x) * 100) %>% 
    prune_taxa(ASV2plot$ASV, .) %>% 
    prune_taxa(unique(arrange(ASV2plot, desc(baseMean))$ASV)[1:topN], .) %>% 
    # prune_taxa(names(sort(taxa_sums(.), TRUE)[1:topN]), .) %>%
    psmelt() %>% 
    rename(OTU = "ASV") ->
    Incorporators_df
  
  ggplot(Incorporators_df, aes(x = !!sym(X_val),
                               y = !!sym(Y_val),
                               shape = !!sym(shape_val),
                               colour = as.factor(!!sym(colour_val)))) + 
    scale_colour_manual(values = ASV_colours) +
    # scale_colour_pomological() +
    geom_point(alpha = 1/2, size = 3) + 
    geom_line() +
    facet_wrap("ASV", scales = "free_y") +
    guides(colour = guide_legend(title = "Day"), 
           shape = guide_legend(title = "Label <sup>13</sup>C")) +
    labs(x = "Density (g ml<sup>-1</sup>)",
         title = paste(ASV2plot$Species[1])) +
    theme(legend.title = element_markdown(),
          axis.title.x = element_markdown(),
          plot.title = element_markdown())
  
  
}

plot_reps_heatmap <- function(DESeq_res_df,
                         x = "Replicate",
                         facet_names = "Day",
                         sample_colours = "black",
                         HM_title = "") {
  require(dplyr)
  require(ggplot2)
  require(viridis)
  require(ggtext)
  colors <- sample_colours
  labels2draw <- levels(pull(DESeq_res_df, facet_names))
  labels <- setNames(glue("<i style='colors:{colors}'>{labels2draw}</i>"), labels2draw)
  DESeq_res_df %>%
    # filter(Labelled == "Labelled") %>%
    mutate(log2FoldChange = ifelse(Labelled == "Labelled", log2FoldChange, NA_integer_)) %>% # retain values for labelled ASVs only
    select(ASV, !!sym(x), !!sym(facet_names), log2FoldChange) %>%
    # mutate(across(ASV, ~factor(., levels = tip_order))) %>%
    complete(., ASV) %>%
    ggplot(., aes(!!sym(x), ASV, fill = log2FoldChange)) +
    geom_tile(
      colour = "white",
      size = 0.25
    ) +
    # scale_fill_gradient(low = "gray", high = "darkred") +
    scale_fill_viridis(
      na.value = "white",
      option = "inferno"
    ) +
    guides(fill = guide_legend(
      title = "Log<sub>2</sub> fold change",
      title.position = "top"
    )) +
    facet_wrap(vars(!!sym("Day")),
               labeller = as_labeller(labels),
               nrow = 1,
               scales = "fixed"
    ) +
    theme(
      plot.title = element_markdown(size = f_size, face = "bold"),
      axis.text.x = element_markdown(
        size = f_size - 6,
        angle = 45,
        vjust = 1,
        hjust = 1
      ),
      panel.grid.major = element_blank(),
      axis.title.y = element_blank(),
      axis.title.x = element_markdown(size = f_size),
      axis.text.y = element_blank(),
      axis.ticks.y = element_blank(),
      strip.background = element_blank(),
      strip.text = element_markdown(size = f_size - 2),
      legend.key.size = unit(0.3, "cm"),
      legend.title = element_markdown(size = f_size),
      legend.position = "bottom",
      legend.text = element_text(size = f_size - 2),
      plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "cm")
    ) +
    ggtitle(HM_title) ->
    HM_plot
  return(HM_plot)
}

plot_ggtree <- function(ps_obj, 
                        rank = "Phylum",
                        subrank = "Order",
                        Taxa2plot = "Actinobacteriota",
                        l_rows = 4){
  require(magrittr)
  require(ggplot2)
  require(ggtree)
  require(RColorBrewer)
  
  # subset (phyloseq subset_taxa doesn't support quasiquotation)
  ps_obj %>% 
    tax_table() %>%
    as("data.frame") %>%
    rownames_to_column("ASV") %>% 
    filter(., !!sym(rank) == Taxa2plot) %>% 
    column_to_rownames("ASV") %>% 
    as.matrix() %>% 
    tax_table() ->
    tax_table(ps_obj)
  
  tax_table(ps_obj) %>% 
    as("data.frame") %>% 
    pull(subrank) %>% 
    unique() %>% 
    length() ->
    n_colours

  p_tree <- ggtree(ps_obj,
                       layout = "rectangular") +
    geom_tippoint(aes(colour = !!sym(subrank)), 
                  size = 2, 
                  alpha = 1/2) +
    scale_color_manual(subrank, 
                       values = colorRampPalette(brewer.pal(11, "Spectral"))(n_colours)) +
    # geom_tiplab(hjust=-.3, size = 2) +
    geom_treescale(fontsize = 2) +
    guides(colour = guide_legend(nrow = l_rows,
                                 byrow = TRUE,
                                 title.position = "top")) +
    theme_tree(legend.title = element_markdown(size = f_size - 4),
               legend.position = "bottom", 
               legend.key.size = unit(0.1, "cm"),
               legend.text = element_markdown(size = f_size - 6),
               legend.box = "vertical", 
               legend.margin = margin(),
               plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "cm"),
               plot.title = element_text(size = f_size - 2)) +
    # scale_colour_manual(values = mycolours) +
    ggtitle(Taxa2plot)
  return(p_tree)
}

plot_ggtree_heatmap <- function(p_ggtree, 
                                ps_obj,
                                DESeq_res_df,
                                rank = "Phylum",
                                Taxa2plot = "Actinobacteriota",
                                x = "Hours",
                                facet_names = "Site_Oxygen",
                                sample_colours = "black") {
  require(dplyr)
  require(ggplot2)
  require(viridis)
  require(ggtext)
  
  ps_obj %>% 
    tax_table() %>%
    as("data.frame") %>%
    rownames_to_column("ASV") %>% 
    filter(., !!sym(rank) == Taxa2plot) %>% 
    column_to_rownames("ASV") %>% 
    as.matrix() %>% 
    tax_table() ->
    tax_table(ps_obj)
  
  p_ggtree$data %>% 
    arrange(y, label) %>% 
    pull(label) %>% 
    unique() -> tip_order
  
  DESeq_res_df %>% 
    right_join(., tibble(ASV = taxa_names(ps_obj)), 
               by  = "ASV") ->
    DESeq_res_df_sub
  
colors <- sample_colours
labels2draw <- levels(pull(DESeq_res_df_sub, facet_names))
labels <- setNames(glue("<i style='colors:{colors}'>{labels2draw}</i>"), labels2draw)

  DESeq_res_df_sub %>% 
    # filter(Labelled == "Labelled") %>% 
    mutate(log2FoldChange = ifelse(Labelled == "Labelled", log2FoldChange, NA_integer_)) %>% # retain values for labelled ASVs only
    select(ASV, !!sym(x), !!sym(facet_names), log2FoldChange) %>% # keep only relevant columns
    mutate(across(ASV, ~factor(., levels = tip_order))) %>% # sort ASV levels according to the tree tip order
    complete(ASV, !!sym(x), !!sym(facet_names)) %>% # make sure every ASV is represented in every category of x and facet_names
    ggplot(., aes(!!sym(x), ASV, fill = log2FoldChange)) + 
    geom_tile(colour = "white",
              size = 0.25) +
    # scale_fill_gradient(low = "gray", high = "darkred") +
    scale_fill_viridis(na.value = "white",
                       option = "inferno") +
    guides(fill = guide_legend(title = "Log<sub>2</sub> fold change",
                               title.position = "top")) +
    facet_wrap(vars(!!sym("Species")), 
               labeller = as_labeller(labels),
               nrow = 1) +
    theme(axis.text.x = element_markdown(size = f_size - 6,
                                         angle = 45, 
                                         vjust = 1, 
                                         hjust = 1),
          panel.grid.major = element_blank(),
          axis.title.y = element_blank(),
          axis.title.x = element_markdown(size = f_size - 4),
          axis.text.y = element_blank(),
          axis.ticks.y = element_blank(),
          strip.background = element_blank(),
          strip.text =  element_markdown(size = f_size - 6),
          legend.key.size = unit(0.3, "cm"),
          legend.title = element_markdown(size = f_size - 4),
          legend.position = "bottom",
          legend.text = element_text(size = f_size - 6),
          plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "cm")) ->
    HM_plot
  
  return(HM_plot)
}

wrap_ggtree_heatmap <- function(ps_obj, 
                                DESeq_res_df,
                                rank = "Class",
                                subrank = "Order",
                                Taxa2plot = "Actinobacteria",
                                x = "Day",
                                facet_names = "Species",
                                l_rows = 4,
                                pwidth = 4,
                                pheight = 7) {
  p_t <- plot_ggtree(ps_obj, 
                     rank = rank,
                     subrank = subrank,
                     Taxa2plot = Taxa2plot,
                     l_rows = l_rows) 
  p_hm <- plot_ggtree_heatmap(p_t, 
                              ps_obj,
                              DESeq_res_df, 
                              rank = rank,
                              Taxa2plot = Taxa2plot,
                              x = x,
                              facet_names = facet_names,
                              sample_colours = brewer.pal(n = 11, 
                                                              "RdYlGn")[c(1, 9)])
  p_t_hm <- (p_t + p_hm) + 
    plot_layout(widths = c(1, 1)) 
  
  save_figure(paste0(fig.path, "Tree_HM_", Taxa2plot), 
              p_t_hm, 
              pwidth = pwidth, 
              pheight = pheight,
              dpi = 600)
  
  return(p_t_hm)
}
```

## Differential abundance modelling of SIP gradients
Here we attempt to detect ASVs that were labelled with ^13^C using differential abundance modelling.
Using ANCOMBC [@lin_analysis_2020] we compare the relative abundance of each ASV in the fractions where ^13^C-labelled RNA is expected to be found (>1.795 g ml^-1^; AKA 'heavy' fractions) to the fractions where unlabelled RNA is expected to be found (<1.795 g ml^-1^; AKA 'light' fractions). The method has been previously described in Angel et al., [-@angel_application_2018].

### Setting general parameters:
```{r}
#| label = "general parameters",
#| cache = T
set.seed(2021)
alpha_thresh <- 0.1 # only keep ASVs with a diff abundance p-value below this
LFC_thresh <- 0  # only keep ASVs with a diff abundance LFC above this
prev_thresh <- 2 # only keep ASVs that appear significant in at least X replicates
data_path <- "./DADA2_pseudo/"
# Metadata_table <- "./AnCUE_Metadata_decontam.csv"
# Seq_table <- "DADA2.seqtab_nochim_decontam.tsv"
# Seq_file <- "DADA2.Seqs_decontam.fa"
Proj_name <- "Millipedes_SIP"
Ps_file <- paste0(Proj_name, "_seq_prev_filt.Rds")
# Tree_file <- "./Tree/DADA2.Seqs_decontam_filtered.filtered.align.treefile"
Tree_file <- "./Tree/DADA2_reps_seq_prev_filt.filtered.align.treefile"
Var1 = "Replicate" # e.g sampling point / replicate
Var2 = "Day" # e.g. a treatment or a manipulation
Var3 = "Species" # e.g. a treatment/manipulation or an important covariant
Var4 = "Label..13C." # e.g. an important covariant
```

### Read phyloseq object
```{r}
#| label = "load data",
#| cache = T
# Load phylogenetic tree
Tree <- read_tree(paste0(data_path, Tree_file))

# load and merge  phyloseq object
readRDS(paste0(data_path, Ps_file)) %>% 
  merge_phyloseq(.,
                 phy_tree(Tree)
  ) -> Ps_obj_SIP 

# Save filtered phyloseq object for PICRUSt
#Ps_obj_Labelled <- subset_samples(Ps_obj_SIP, Label..13C. == 'Labelled')
#seqs <- refseq(Ps_obj_Labelled)
#otab <- otu_table(Ps_obj_Labelled)
#write.table(seqs, "Ps_obj_Labelled_seqs.tsv", quote=FALSE)
#write.table(otab, "Ps_obj_Labelled_table.tsv", quote=FALSE,sep="\t")
# Then, run the seqs file through this one liner to clean it up and create a fasta file.
# grep -v '^x' Ps_obj_Labelled_seqs.tsv | awk '{print ">"$1"\n"$2}' > Ps_obj_Labelled_seqs.fa; rm Ps_obj_Labelled_seqs.tsv

sample_data(Ps_obj_SIP)$Group <- factor(paste0(sample_data(Ps_obj_SIP)$Label..13C., sample_data(Ps_obj_SIP)$Density.zone))
sample_data(Ps_obj_SIP)$Day <- factor(sample_data(Ps_obj_SIP)$Day, levels = c("3", "7", "14", "21"))
sample_data(Ps_obj_SIP)$Label..13C. <- factor(sample_data(Ps_obj_SIP)$Label..13C., levels = c("Labelled", "Unlabelled"))
sample_data(Ps_obj_SIP)$Species <- factor(sample_data(Ps_obj_SIP)$Species, levels = c("Epibolus pulchripes", "Glomeris connexa"))
sample_data(Ps_obj_SIP)$Fraction.no. <- factor(sample_data(Ps_obj_SIP)$Fraction.no., levels = c("2", "3", "4", "5", "6", "7", "8", "9", "10", "11"))

# remove fraction 2
Ps_obj_SIP %<>% 
  subset_samples(., Fraction.no. != 2)

# Make relative qPCR values
Ps_obj_SIP %>%
  get_variable() %>%
  group_by(Species, Day, Label..13C., Replicate) %>%
  mutate(qPCR_fraction = X16S_copies..undiluted.RNA./sum(X16S_copies..undiluted.RNA.) * 10^6) ->
  sample_data(Ps_obj_SIP)

# Absolute abundance is incompatible with ANCOM-BC
# Ps_obj_abs <- Ps_obj_SIP
# 
# otu_table(Ps_obj_abs) %<>%
#   transform_sample_counts(., function(x) x / sum(x) * 100) %>%
#   t() %>%
#   as("matrix") %>%
#   as.data.frame() %>%
#   map2_dfc(., get_variable(Ps_obj_abs, "qPCR_fraction") , `*`) %>%
#   data.frame(., row.names = taxa_names(Ps_obj_abs)) %>%
#   t() %>%
#   round() %>%
#   otu_table(., taxa_are_rows = FALSE)
# Ps_obj_SIP <- Ps_obj_abs
# Ps_obj_abs <- Ps_obj_SIP # we will use the raw reads for now
```
### Plot the SIP gradients
First I'll plot the 16S copy numbers vs density
```{r}
#| label = "plot SIP fractions",
#| cache = T,
#| fig.height = 8,
#| fig.width = 10

get_variable(Ps_obj_SIP) %>% 
  mutate(qPCR_fraction = qPCR_fraction/10^4) %>% # bring it back from ppm to %
  mutate(Rep_label = paste(Replicate, Label..13C.)) %>% 
  mutate(Rep_label = factor(recode(Rep_label, 
                            `1 Labelled` = "1", 
                            `2 Labelled` = "2", 
                            `3 Labelled` = "3",
                            `1 Unlabelled` = "Unlabelled"),
                            levels = c("Unlabelled", "1", "2", "3"))) %>% 
  mutate(Species = recode_factor(Species, `Epibolus pulchripes` = "*Epibolus pulchripes*", `Glomeris connexa` = "*Glomeris connexa*"))->
  qPCR_df
plot_SIP_fractions(qPCR_df, colour = "Rep_label")
```

### Beta Diversity Join Analysis
Let us look first at the dissimilarity in community composition between the different fractions. If the labelling was strong enough we should see a deviation of (some of) the heavy fractions from the light ones. However, a lack of a significant deviation does not mean unsuccessful labelling because if only a small minority of the community was labelled we might not see it here (but we will, hopefully, see it using DESeq2 modelling).

```{r}
#| label = "beta div joint",
#| cache = T

# Join analysis
plot_lib_dist(Ps_obj_SIP)

(mod0 <- adonis2(vegdist(otu_table(Ps_obj_SIP), method = "horn") ~ Lib.size,
  data = get_variable(Ps_obj_SIP),
  permutations = 999
))


(mod1 <- adonis2(vegdist(otu_table(Ps_obj_SIP), method = "horn") ~ Species * Day,
  data = get_variable(Ps_obj_SIP),
  permutations = 999
)) 

Ps_obj_SIP %>%
  scale_libraries(round = "round") ->
  Ps_obj_SIP_scaled
  
plot_lib_dist(Ps_obj_SIP_scaled)

(mod0.2 <- adonis2(vegdist(otu_table(Ps_obj_SIP_scaled), method = "horn") ~ Lib.size,
  data = get_variable(Ps_obj_SIP_scaled),
  permutations = 999
))

(mod2 <- adonis2(vegdist(otu_table(Ps_obj_SIP_scaled), method = "horn") ~ Species * Day,
  data = get_variable(Ps_obj_SIP_scaled),
  permutations = 999
))


(mod3 <- adonis2(vegdist(otu_table(Ps_obj_SIP_scaled), method = "horn") ~ Species * Day + Species:Density.zone,
  data = get_variable(Ps_obj_SIP_scaled),
  permutations = 999
))

Species_disp <- betadisper(vegdist(otu_table(Ps_obj_SIP), method = "horn"), get_variable(Ps_obj_SIP, "Species"))
permutest(Species_disp)
plot(Species_disp)

Day_disp <- betadisper(vegdist(otu_table(Ps_obj_SIP), method = "horn"), get_variable(Ps_obj_SIP, "Day"))
permutest(Day_disp)
plot(Day_disp)

Density_disp <- betadisper(vegdist(otu_table(Ps_obj_SIP), method = "horn"), get_variable(Ps_obj_SIP, "Density.zone"))
permutest(Density_disp)
plot(Density_disp)
```

```{r}
#| label = "ordinations",
#| fig.height = 12,
#| cache = T
Ord <- ordinate(Ps_obj_SIP_scaled, "CAP", "horn", 
                formula =  ~ Species * Day + Species:Density.zone)
explained <- as.numeric(format(round(eigenvals(Ord)/sum(eigenvals(Ord)) * 100, 1), nsmall = 1))
Ord_plt <- plot_ordination(Ps_obj_SIP_scaled, Ord, type = "Sample.no.", color = "Label..13C.", justDF = TRUE)

p_ord_joint <- ggplot(Ord_plt) +
  geom_point(aes(
               x = CAP1,
               y = CAP2,
               color = Label..13C.,
               size = Density..g.ml.1.,
               shape = Species
             ), alpha = 2 / 3) +
  guides(colour = guide_legend(title = "Labelling"), 
         size = guide_legend(title = "Density (g ml<sup>-1</sup>)"),
         shape = guide_legend(title = "Species")) +
  scale_colour_locuszoom() + 
  # scale_colour_manual(values = Gradient.colours) +
  # scale_fill_manual(values = Gradient.colours, guide = "none") +
  labs(x = sprintf("CAP1 (%s%%)", explained[1]),
  y = sprintf("CAP2 (%s%%)", explained[2])) +
  coord_fixed(ratio = sqrt(explained[2] / explained[1])) +
   theme(legend.justification = "top",
         legend.title = element_markdown(size = 11)
         ) +
  scale_size_continuous(breaks = round(c(seq(min(Ord_plt$Density..g.ml.1.), 
                                       max(Ord_plt$Density..g.ml.1.), 
                                       length.out = 5), 
                                   1), 4),
                        range = c(0.1, 5)) +
  facet_grid(Species ~ Day) +
  ggtitle("Joint analysis") +
  NULL
p_ord_joint
# save_figure(paste0(fig.path, "Oridnation"),
#             p_ord_joint,
#             pwidth = 10,
#             pheight = 8,
#             dpi = 600)
# 
# knitr::include_graphics(paste0(fig.path, "Oridnation", ".png"))
```


### Beta diversity analysis for Epibolus pulchripes
```{r}
#| label = "beta div for Epibolus pulchripes",
#| cache = T
Ps_obj_Epi <- subset_samples(Ps_obj_SIP, Species == 'Epibolus pulchripes')


plot_lib_dist(Ps_obj_Epi)

(mod0 <- adonis2(vegdist(otu_table(Ps_obj_Epi), method = "horn") ~ Lib.size,
  data = get_variable(Ps_obj_Epi),
  permutations = 999
))


(mod1 <- adonis2(vegdist(otu_table(Ps_obj_Epi), method = "horn") ~ Day,
  data = get_variable(Ps_obj_Epi),
  permutations = 999
))

(mod1 <- adonis2(vegdist(otu_table(Ps_obj_Epi), method = "horn") ~ Density.zone,
  data = get_variable(Ps_obj_Epi),
  permutations = 999
))

(mod1 <- adonis2(vegdist(otu_table(Ps_obj_Epi), method = "horn") ~ Day * Density.zone,
  data = get_variable(Ps_obj_Epi),
  permutations = 999
))

(mod2 <- adonis2(vegdist(otu_table(Ps_obj_Epi), method = "horn") ~ Day + Density.zone,
  data = get_variable(Ps_obj_Epi),
  permutations = 999
))

Ps_obj_Epi %>%
  scale_libraries(round = "round") ->
  Ps_obj_Epi_scaled
  
plot_lib_dist(Ps_obj_Epi_scaled)

(mod0.1 <- adonis2(vegdist(otu_table(Ps_obj_Epi_scaled), method = "horn") ~ Lib.size,
  data = get_variable(Ps_obj_Epi_scaled),
  permutations = 999
))

(mod1 <- adonis2(vegdist(otu_table(Ps_obj_Epi_scaled), method = "horn") ~ Day,
  data = get_variable(Ps_obj_Epi_scaled),
  permutations = 999
))

(mod0.2 <- adonis2(vegdist(otu_table(Ps_obj_Epi_scaled), method = "horn") ~ Density.zone,
  data = get_variable(Ps_obj_Epi_scaled),
  permutations = 999
))

(mod1.1 <- adonis2(vegdist(otu_table(Ps_obj_Epi_scaled), method = "horn") ~ Day * Density.zone,
  data = get_variable(Ps_obj_Epi_scaled),
  permutations = 999
))


(mod2.1 <- adonis2(vegdist(otu_table(Ps_obj_Epi_scaled), method = "horn") ~ Day + Density.zone,
  data = get_variable(Ps_obj_Epi_scaled),
  permutations = 999
))


Day_disp <- betadisper(vegdist(otu_table(Ps_obj_Epi_scaled), method = "horn"), get_variable(Ps_obj_Epi_scaled, "Day"))
permutest(Day_disp)
plot(Day_disp, main = "Day BetaDisper in Epibolus Hindgut Samples", cex.lab = 1.3, cex.axis = 1.5) 

Density_disp <- betadisper(vegdist(otu_table(Ps_obj_Epi_scaled), method = "horn"), get_variable(Ps_obj_Epi_scaled, "Density.zone"))
permutest(Density_disp)
plot(Density_disp, main = "Density BetaDisper in Epibolus Hindgut Samples", cex.lab = 1.3, cex.axis = 1.5)
```

```{r}
#| label = "ordinations for Epibolus pulchripes",
#| fig.height = 12,
#| cache = T
Ord <- ordinate(Ps_obj_Epi_scaled, "CAP", "horn", 
                formula =  ~ Day + Density.zone)
explained <- as.numeric(format(round(eigenvals(Ord)/sum(eigenvals(Ord)) * 100, 1), nsmall = 1))
Ord_plt <- plot_ordination(Ps_obj_Epi_scaled, Ord, type = "Sample.no.", color = "Label..13C.", justDF = TRUE)

p_ord_joint <- ggplot(Ord_plt) +
  geom_point(aes(
               x = CAP1,
               y = CAP2,
               color = Label..13C.,
               size = Density..g.ml.1.
             ), alpha = 2 / 3) +
  guides(colour = guide_legend(title = "Labelling"), 
         size = guide_legend(title = "Density (g ml<sup>-1</sup>)")) +
  scale_colour_locuszoom() + theme(text = element_text(size = 20)) +
  # scale_colour_manual(values = Gradient.colours) +
  # scale_fill_manual(values = Gradient.colours, guide = "none") +
  labs(x = sprintf("CAP1 (%s%%)", explained[1]),
  y = sprintf("CAP2 (%s%%)", explained[2])) +
  coord_fixed(ratio = sqrt(explained[2] / explained[1])) +
   theme(legend.justification = "top",
         legend.title = element_markdown(size = 20)
         ) + 
  scale_size_continuous(breaks = round(c(seq(min(Ord_plt$Density..g.ml.1.), 
                                       max(Ord_plt$Density..g.ml.1.), 
                                       length.out = 5), 
                                   1), 4),
                        range = c(0.1, 5)) +
  facet_grid(~ Day) +
  ggtitle("Epibolus pulchripes CAP") +
  NULL



# save_figure(paste0(fig.path, "Oridnation for Epibolus pulchripes"), 
#             p_ord_joint, 
#             pwidth = 10, 
#             pheight = 8,
#             dpi = 600)
# 
# knitr::include_graphics(paste0(fig.path, "Oridnation for Epibolus pulchripes", ".png"))
```


### Beta diversity analysis for Glomeris connexa
```{r}
#| label = "beta div for Glomeris connexa",
#| cache = T
Ps_obj_Glo <- subset_samples(Ps_obj_SIP, Species == 'Glomeris connexa')

plot_lib_dist(Ps_obj_Glo)

(mod0 <- adonis2(vegdist(otu_table(Ps_obj_Glo), method = "horn") ~ Lib.size,
  data = get_variable(Ps_obj_Glo),
  permutations = 999
))


(mod1 <- adonis2(vegdist(otu_table(Ps_obj_Glo), method = "horn") ~ Day * Density.zone,
  data = get_variable(Ps_obj_Glo),
  permutations = 999
))

(mod2 <- adonis2(vegdist(otu_table(Ps_obj_Glo), method = "horn") ~ Day + Density.zone,
  data = get_variable(Ps_obj_Glo),
  permutations = 999
))

Ps_obj_Glo %>%
  scale_libraries(round = "round") ->
  Ps_obj_Glo_scaled
  
plot_lib_dist(Ps_obj_Glo_scaled)

(mod0.1 <- adonis2(vegdist(otu_table(Ps_obj_Glo_scaled), method = "horn") ~ Lib.size,
  data = get_variable(Ps_obj_Glo_scaled),
  permutations = 999
))

(mod1.1 <- adonis2(vegdist(otu_table(Ps_obj_Glo_scaled), method = "horn") ~ Density.zone,
  data = get_variable(Ps_obj_Glo_scaled),
  permutations = 999
))


(mod1.1 <- adonis2(vegdist(otu_table(Ps_obj_Glo_scaled), method = "horn") ~ Day,
  data = get_variable(Ps_obj_Glo_scaled),
  permutations = 999
))

(mod1.1 <- adonis2(vegdist(otu_table(Ps_obj_Glo_scaled), method = "horn") ~ Day * Density.zone,
  data = get_variable(Ps_obj_Glo_scaled),
  permutations = 999
))


(mod2.1 <- adonis2(vegdist(otu_table(Ps_obj_Glo_scaled), method = "horn") ~ Day + Density.zone,
  data = get_variable(Ps_obj_Glo_scaled),
  permutations = 999
))


Day_disp <- betadisper(vegdist(otu_table(Ps_obj_Glo_scaled), method = "horn"), get_variable(Ps_obj_Glo_scaled, "Day"))
permutest(Day_disp)
plot(Day_disp, main = "Day BetaDisper in Glomeris Hindgut Samples", cex.lab = 1.3, cex.axis = 1.5)

Density_disp <- betadisper(vegdist(otu_table(Ps_obj_Glo_scaled), method = "horn"), get_variable(Ps_obj_Glo_scaled, "Density.zone"))
permutest(Density_disp)
plot(Density_disp, main = "Density BetaDisper in Glomeris Hindgut Samples", cex.lab = 1.3, cex.axis = 1.5)
```


```{r}
#| label = "ordinations for Glomeris connexa",
#| fig.height = 12,
#| cache = T
Ord <- ordinate(Ps_obj_Glo_scaled, "CAP", "horn", 
                formula =  ~ Day + Density.zone)
explained <- as.numeric(format(round(eigenvals(Ord)/sum(eigenvals(Ord)) * 100, 1), nsmall = 1))
Ord_plt <- plot_ordination(Ps_obj_Glo_scaled, Ord, type = "Sample.no.", color = "Label..13C.", justDF = TRUE)

p_ord_joint <- ggplot(Ord_plt) +
  geom_point(aes(
               x = CAP1,
               y = CAP2,
               color = Label..13C.,
               size = Density..g.ml.1.
             ), alpha = 2 / 3) +
  guides(colour = guide_legend(title = "Labelling"), 
         size = guide_legend(title = "Density (g ml<sup>-1</sup>)")) +
  scale_colour_locuszoom() + theme(text = element_text(size = 20)) +
  # scale_colour_manual(values = Gradient.colours) +
  # scale_fill_manual(values = Gradient.colours, guide = "none") +
  labs(x = sprintf("CAP1 (%s%%)", explained[1]),
  y = sprintf("CAP2 (%s%%)", explained[2])) +
  coord_fixed(ratio = sqrt(explained[2] / explained[1])) +
   theme(legend.justification = "top",
         legend.title = element_markdown(size = 11)
         ) +
  scale_size_continuous(breaks = round(c(seq(min(Ord_plt$Density..g.ml.1.), 
                                       max(Ord_plt$Density..g.ml.1.), 
                                       length.out = 5), 
                                   1), 4),
                        range = c(0.1, 5)) +
  facet_grid(~ Day)  +
  ggtitle("Glomeris connexa CAP") +
  NULL


# 
# save_figure(paste0(fig.path, "Oridnation for Glomeris connexa"), 
#             p_ord_joint, 
#             pwidth = 10, 
#             pheight = 8,
#             dpi = 600)
# 
# knitr::include_graphics(paste0(fig.path, "Oridnation for Glomeris connexa", ".png"))
```

### Subset the dataset
Because the ANCOMBC models will be run on each gradient separately, we need to subset the phyloseq object. This is easily done using `HTSSIP::phyloseq_subset` [@youngblut_htssip_2018]
```{r}
#| label = "subset dataset",
#| cache = T

# Examine if some samples need to be removed
# Ps_obj_SIP %>%
#   subset_samples(Long_name == "Epibolus pulchripes Day 21 replicate 2") %>%
#   otu_table() %>%
#   as("matrix") %>% View()
Ps_obj_SIP %<>% # "Roey076-E3-2_S76", 
  subset_samples(!(merged_sample_name %in% c("Roey120-E2-9_S120", "Roey121-E3-8_S121", "Roey129-E3-9_S129", "Roey103-E1-6_S103", "Roey113-4-5_S106")))


# split, ignore time points (for labelled ASV plots)
test_expr_1 <- "(Species == '${Species}' & Label..13C. == 'Unlabelled') | (Species == '${Species}'  & Label..13C. == '${Label..13C.}')"
params_1 <- get_treatment_params(Ps_obj_SIP, c("Species",
                                     "Label..13C."),
                                 "Label..13C. != 'Unlabelled'")
Ps_obj_SIP_noTime_l <- phyloseq_subset(subset_samples(Ps_obj_SIP, Replicate == 1), params_1, test_expr_1) 

names(Ps_obj_SIP_noTime_l) %<>%
  map(., ~str_remove_all(.x, "\\s\\|\\s.*")) %>%
  map(., ~str_remove_all(.x, "\\(|\\)|Species == | & Label..13C. == .*|'")) 

# split, include time points (for DESeq2 modelling) (within gradient comparison)
test_expr_2 <- "(Species == '${Species}' &  Day == '${Day}' & Replicate == '${Replicate}' & Label..13C. == '${Label..13C.}') | (Species == '${Species}' & Day == '${Day}' & Replicate == '${Replicate}' & Label..13C. == '${Label..13C.}')"

params_2 <- get_treatment_params(Ps_obj_SIP, c("Species",
                                   "Day",
                                   "Replicate",
                                   "Label..13C."))

# Generate a list of subsetted phyloseq objects
Ps_obj_SIP_byTime_l <- phyloseq_subset(Ps_obj_SIP, params_2, test_expr_2)
names(Ps_obj_SIP_byTime_l) %<>%
  map(., ~str_remove_all(.x, "\\s\\|\\s.*")) %>%
  map(., ~str_remove_all(.x, "\\(|\\)|Species == |Day == |Replicate == |Label..13C. == |'")) %>%
  map(., ~str_replace_all(.x, "  ([0-9]+)", " \\1 day"))

# Order by name
Ps_obj_SIP_byTime_l %<>% 
  .[order(names(.))]
```

### Differential abundance models
Now run the differential abundance models using ANCOMBC We then filter the results to include only ASVs with Log_2_ fold change >`LFC_thresh` and significant at P<`alpha_thresh`. Lastly, we run 'LFC-shrinking' based on Stephens [-@stephens_fdr_2016].

```{r}
#| label = "ANCOMBC models by time",
#| cache = T

Ps_obj_SIP_byTime_l %<>% mclapply(., 
                                   function(x) {filter_ASVs_by_prevalence(ps = x, 
                                                                        abund = 10, 
                                                                        prev = 3)}, 
                                   mc.cores = nrow(params_2)) 

Ps_obj_SIP_byTime_l[[8]] %>%
  # subset_samples(Long_name == "Epibolus pulchripes Day 21 replicate 3") %>%
  otu_table() %>%
  as("matrix") %>% View() #colnames %>% sort()
get_variable(Ps_obj_SIP_byTime_l[[8]]) %>% 
  dplyr::select(Density.zone) %>% 
  rownames_to_column("sample") ->
  sample_df

Ps_obj_SIP_byTime_l[[8]] %>% 
  otu_table() %>%
  as("matrix") %>%
  .[, 1:10] %>% 
  as.data.frame() %>% 
  rownames_to_column("sample")->
  otu_df
  
test_df <- full_join(sample_df, otu_df, by = "sample") 
kruskal.test(Seq_206 ~ Density.zone, data = test_df)



art_mod <- art(Seq_206 ~ Density.zone, data = test_df)
print(mod_summary <- anova(art_mod))
art_mod_lm <- artlm(art_mod, "Density.zone") # build a linear model for ART data
# Compute estimated marginal means (EMMs)
(emm_mod <- emmeans(art_mod_lm, as.formula(paste("", "Density.zone", sep = " ~ ")), weights = "equal"))

# Contrasts, pairwise comparisons, tests, and confidence intervals.
(emm_mod_cons <- contrast(emm_mod, method = "pairwise", adjust = "tukey"))  




tse_obj_abs_byTime_l <- mclapply(Ps_obj_SIP_byTime_l,
                                   function(x) {phyloseq_to_tse_safe(x,
                                                                        test_condition = "Density.zone",
                                                                        ref_level = "Light")},
                                   mc.cores = nrow(params_2))
# run ANCOM-BC
# ANCOMBC_out <- mclapply(tse_obj_abs_byTime_l[1:2], 
#                         function(x) {ancombc2(data = x, 
#                                               assay_name = "counts", 
#                                               fix_formula = "Density.zone", 
#                                               p_adj_method = "BH",
#                                               group = "Density.zone",
#                                               # struc_zero = TRUE,
#                                               # neg_lb = TRUE,
#                                               alpha = alpha_thresh,
#                                               n_cl = 20, 
#                                               verbose = TRUE)}, 
#                         mc.cores = nrow(params_2)) 

ANCOMBC_out <- vector(mode = 'list', length = length(tse_obj_abs_byTime_l))
names(ANCOMBC_out) <- names(tse_obj_abs_byTime_l)
for (i in seq(1, length(tse_obj_abs_byTime_l))) { # mclapply gives errors
  ANCOMBC_out[[i]] <- ancombc2(data = tse_obj_abs_byTime_l[[i]], 
                             assay_name = "counts", 
                             fix_formula = "Density.zone", 
                             # pseudo = 1,
                             p_adj_method = "BH",
                             group = "Density.zone",
                             # struc_zero = TRUE,
                             # neg_lb = TRUE,
                             alpha = alpha_thresh,
                             n_cl = 70, 
                             verbose = TRUE)
}
saveRDS(ANCOMBC_out, file = paste0("./", Proj_name, "_ANCOM_BC.Rds"))
# ANCOMBC_out <- readRDS(paste0("./", Proj_name, "_ANCOM_BC.Rds"))
  
# extract results from the ANCOM-BC analysis, change the column names
ANCOMBC_out  %>% 
  map(~pluck(., "res")) %>% 
  keep( ~ !is.null(.) ) %>% 
  map(., ~rename(.x, taxon = "ASV", 
                 lfc_Density.zoneHeavy = "log2FoldChange",
                 se_Density.zoneHeavy = "lfcSE",
                 q_Density.zoneHeavy = "padj",
                 diff_Density.zoneHeavy = "Significant")) %>% 
  map(.,  ~mutate(.x, Significant = if_else(log2FoldChange < 0, FALSE, Significant))) -> 
  ANCOMBC_res

Ps_obj_SIP_byTime_l %>% 
  map(., ~psmelt(.x)) %>% 
  map(., ~group_by(.x, OTU)) %>% 
  map(., ~dplyr::summarise(.x, mean(Abundance))) %>% 
  map(., ~rename(.x, OTU = "ASV",
                `mean(Abundance)` = "baseMean")) -> 
  baseMeans_l
  
# Store labelled ASVs and save them to a file
ANCOMBC_res %>% 
  map(., ~subset(.x, Significant == TRUE)) %>%
  map(., ~as.data.frame(.x)) %>% 
  # map(., ~rownames_to_column(.x, "ASV")) %>% 
  map2(.x = ., # the first object to iterate over
     .y = baseMeans_l, # the second object to iterate over
     ~left_join(.x, .y, by = "ASV")) %>% 
  bind_rows(., .id = "Comparison") %>% 
  arrange(Comparison, desc(baseMean)) %>% 
  separate(., "Comparison" ,c(Var3, Var2, Var1), sep = " & ", remove = FALSE) %>% 
  group_by(ASV, !!sym(Var3)) %>%
  mutate(ASV_count = n()) %>%
  ungroup() %T>% 
  write_tsv(., file = paste0("ANCOM_BC_byTime_a-", alpha_thresh, "_", LFC_thresh, "_prev.tsv")) ->
  ANCOMBC_res_SIP_byTime_df

# put the results back in a list so we can plot them
ANCOMBC_res_SIP_byTime_df %>%
  arrange(Comparison) %>% 
  group_by(Comparison) %>% 
  group_split() ->
  ANCOMBC_res_SIP_byTime_l

ANCOMBC_res_SIP_byTime_l %>% 
  map(., ~pull(.x, Comparison)[1]) ->
  names(ANCOMBC_res_SIP_byTime_l)
```

#### Inspect results
```{r}
#| label = "vis DES res",
#| cache = T
ANCOMBC_res_SIP_byTime_df %>% 
  # get_variable() %>%
  select_if(is.numeric) %>% 
  vis_value()

ANCOMBC_res_SIP_byTime_df %>% 
  # get_variable() %>% 
  select_if(is.numeric) %>% 
  vis_cor()
```

#### Plot differential abundance models
```{r}
#| label = "plot DESeq2 models",
#| fig.height = 14,
#| fig.width = 12,
#| cache = T

# ps_obj <- Ps_obj_SIP
# ANCOMBC_results <- ANCOMBC_res[8]
# plot_ANCOMBC(ANCOMBC_results, ps_obj, plot_title = names(ANCOMBC_results))

ANCOMBC_plots <- map(seq(length(ANCOMBC_res)), 
                        ~plot_ANCOMBC(ANCOMBC_res[.x],
                                    Ps_obj_SIP, 
                                    plot_title = names(ANCOMBC_res[.x])))

Epibolus_ANCOMBC <- ((ANCOMBC_plots[[9]] + 
                      theme(legend.position = "none") +
                      theme(axis.text.x = element_blank()) +
                      ylim(-15, 15)) +
                     (ANCOMBC_plots[[11]] + 
                        theme(legend.position = "none", 
                              axis.text.x = element_blank(), 
                              axis.title.y = element_blank()) +
                        ylim(-15, 15)) +
                     (ANCOMBC_plots[[12]] + 
                        theme(legend.position = "none", 
                              axis.text.x = element_blank(), 
                              axis.title.y = element_blank()) +
                        ylim(-15, 15)) +
                     (ANCOMBC_plots[[10]] + 
                        theme(legend.position = "none", 
                              axis.text.x = element_blank(), 
                              axis.title.y = element_blank()) +
                        ylim(-15, 15)) +
                     (ANCOMBC_plots[[13]] + 
                        theme(legend.position = "none", 
                              axis.text.x = element_blank()) +
                        ylim(-15, 15)) +
                     (ANCOMBC_plots[[15]] + 
                        theme(legend.position = "none", 
                              axis.text.x = element_blank(), 
                              axis.title.y = element_blank()) +
                        ylim(-15, 15)) +
                     (ANCOMBC_plots[[16]] + 
                        theme(legend.position = "none", 
                              axis.text.x = element_blank(), 
                              axis.title.y = element_blank()) +
                        ylim(-15, 15)) +
                     (ANCOMBC_plots[[14]] + 
                        theme(legend.position = "none",
                              axis.text.x = element_blank(), 
                              axis.title.y = element_blank()) +
                        ylim(-15, 15)) +
                     (ANCOMBC_plots[[1]] + 
                        theme(legend.position = "none", 
                              axis.text.x = element_blank()) +
                        ylim(-15, 15)) +
                     (ANCOMBC_plots[[3]] + 
                        theme(legend.position = "none",
                              axis.text.x = element_blank(), 
                              axis.title.y = element_blank()) +
                        ylim(-15, 15)) +
                     (ANCOMBC_plots[[4]] + 
                        theme(legend.position = "none",
                              axis.text.x = element_blank(), 
                              axis.title.y = element_blank()) +
                        ylim(-15, 15)) +
                     (ANCOMBC_plots[[2]] + 
                        theme(legend.position = "none",
                              axis.text.x = element_blank(), 
                              axis.title.y = element_blank()) +
                        ylim(-15, 15))+
                     (ANCOMBC_plots[[5]] + 
                        theme(legend.position = "none") +
                        ylim(-15, 15))+
                     (ANCOMBC_plots[[7]] + 
                        theme(legend.position = "none",
                              axis.title.y = element_blank()) +
                        ylim(-15, 15))+
                     (ANCOMBC_plots[[8]] + 
                        theme(legend.position = "none",
                              axis.title.y = element_blank()) +
                        ylim(-15, 15))+
                     (ANCOMBC_plots[[6]] + 
                        theme(legend.position = "none", 
                              axis.title.y = element_blank()) +
                        ylim(-15, 15))+
                     plot_layout(ncol = 4, guides = "collect") & 
                     theme(legend.position = 'bottom'))


save_figure(paste0(fig.path, "Epibolus_all_DESeq2"), 
            Epibolus_DESeq, 
            pwidth = 14, 
            pheight = 12,
            dpi = 600)

knitr::include_graphics(paste0(fig.path, "Epibolus_all_DESeq2", ".png"))

Glomeris_ANCOMBC <- ((ANCOMBC_plots[[19]] + 
                      theme(legend.position = "none") +
                      theme(axis.text.x = element_blank()) +
                      ylim(-15, 15)) +
                     (ANCOMBC_plots[[20]] + 
                        theme(legend.position = "none", 
                              axis.text.x = element_blank(), 
                              axis.title.y = element_blank()) +
                        ylim(-15, 15)) +
                     (ANCOMBC_plots[[21]] + 
                        theme(legend.position = "none", 
                              axis.text.x = element_blank(), 
                              axis.title.y = element_blank()) +
                        ylim(-15, 15)) +
                     (ANCOMBC_plots[[22]] + 
                        theme(legend.position = "none", 
                              axis.text.x = element_blank()) +
                        ylim(-15, 15)) +
                     (ANCOMBC_plots[[23]] + 
                        theme(legend.position = "none", 
                              axis.text.x = element_blank(), 
                              axis.title.y = element_blank()) +
                        ylim(-15, 15)) +
                     (ANCOMBC_plots[[24]] + 
                        theme(legend.position = "none", 
                              axis.text.x = element_blank(), 
                              axis.title.y = element_blank()) +
                        ylim(-15, 15)) +
                     (ANCOMBC_plots[[13]] + 
                        theme(legend.position = "none", 
                              axis.text.x = element_blank()) +
                        ylim(-15, 15)) +
                     (ANCOMBC_plots[[14]] + 
                        theme(legend.position = "none",
                              axis.text.x = element_blank(), 
                              axis.title.y = element_blank()) +
                        ylim(-15, 15)) +
                     (ANCOMBC_plots[[15]] + 
                        theme(legend.position = "none", 
                              axis.text.x = element_blank(), 
                              axis.title.y = element_blank()) +
                        ylim(-15, 15)) +
                     (ANCOMBC_plots[[16]] + 
                        theme(legend.position = "none") +
                        ylim(-15, 15)) +
                     (ANCOMBC_plots[[17]] + 
                        theme(legend.position = "none",
                              axis.title.y = element_blank()) +
                        ylim(-15, 15)) +
                     (ANCOMBC_plots[[18]] + 
                        theme(legend.position = "none", 
                              axis.title.y = element_blank()) +
                        ylim(-15, 15)) +
                     plot_layout(ncol = 3, guides = "collect") & 
                     theme(legend.position = 'bottom'))

save_figure(paste0(fig.path, "Glomeris_DESeq2"), 
            Glomeris_DESeq, 
            pwidth = 14, 
            pheight = 12,
            dpi = 600)

knitr::include_graphics(paste0(fig.path, "Glomeris_DESeq2", ".png"))
```

### Plot labelled ASVs
```{r}
#| label = "plot labelled ASVs",
#| fig.height = 12,
#| fig.width = 16,
#| cache = T
plot_combintions <- crossing(Species = c("Epibolus pulchripes", "Glomeris connexa"))
DESeq_res_SIP_byTime_LFC_sig_prev_df %>% 
  group_by(ASV) %>%
  mutate(sum_abund = sum(baseMean)) %>% 
  filter(sum_abund > 1000) -> 
  abund_ASV_2_plot

Labelled_ASVs <- map(seq(length(Ps_obj_SIP_noTime_l)), ~plot_otus_by_density(Ps_obj_SIP_noTime_l[[.x]], 
                     ASV2plot = filter(abund_ASV_2_plot, Species == plot_combintions$Species[.x]))) # devtools::install_github("gadenbuie/ggpomological")

map(seq(length(Ps_obj_SIP_noTime_l)), 
    ~save_figure(paste0(fig.path, "Labelled_ASVs_", paste(plot_combintions[.x, ], collapse = "_")), 
                 Labelled_ASVs[[.x]], 
                 pwidth = 16, 
                 pheight = 12,
                 dpi = 500))

plots2display <- list.files(path = paste0(fig.path), 
                    pattern = "^Labelled_ASVs_(.*).png$",
                    full.names = TRUE)

knitr::include_graphics(plots2display)
```

### Plot phylogenetic trees with heatmaps
Prepare data for plotting
```{r}
#| label = "Prepare data for tree plotting",
#| cache = T

# c("Epibolus pulchripes 3 Day", "Epibolus pulchripes 7 Day", "Epibolus pulchripes 14 Day", "Glomeris connexa 3 Day", "Glomeris connexa 7 Day", "Glomeris connexa 14 Day")  ->
 # col_order

DESeq_res_SIP_byTime_LFC_l %>% 
  map(., ~as.data.frame(.x)) %>% 
  map(., ~rownames_to_column(.x, "ASV")) %>% 
  bind_rows(., .id = "Comparison") %>% 
  # filter(str_detect(Comparison, "Labelled")) %>% # remove unlabelled samples [c(-7, -8, -9, -10, -11, -12)]
  mutate(Labelled = ifelse(is.na(padj) < alpha_thresh & log2FoldChange > LFC_thresh, "Labelled", "Unlabelled")) %>%
  # mutate(Labelled = ifelse(ASV %in% DESeq_res_SIP_byTime_LFC_sig_prev_df$ASV, "Labelled", "Unlabelled")) %>%
  #  arrange(Comparison, desc(baseMean)) %>% 
  separate(., "Comparison" ,c("Species","Day", "Replicate"), sep = " & ") %>% 
  mutate(across(c("Day"),  ~gsub(" d", "", .))) %>%
  mutate(across(c("Day"),  ~as.numeric(.))) %>%
  mutate(Day = factor(paste0(Day),
                          levels = c("3", "7", "14", "21")))  %>% 
  # mutate(Species_Day = paste(Species, Day)) %>%
  # mutate(across(Species_Day, ~factor(., levels = col_order))) %>% 
  mutate(Species = factor(paste0(Species),
                          levels = c("Epibolus pulchripes", "Glomeris connexa")))  %>% 
  
  # mutate(Species = paste(Species)) %>% 
  identity() ->
  DESeq_res_SIP_byTime_all_df 


# Summarise number of labelled and unlabelled ASVs
DESeq_res_SIP_byTime_all_df %>% 
  group_by(Labelled) %>% 
  summarise(n = n()) 

# remove taxa with NA from DESeq analysis
DESeq_res_SIP_byTime_all_df %<>% 
  filter(!is.na(Labelled)) # %>% 
  # pull(Labelled) -> 
  # bad_seqs

# remove NA taxa from PS obj
Ps_obj_SIP %>% 
  prune_taxa(setdiff(taxa_names(Ps_obj_SIP), ""), .) %>% # outlier
  prune_taxa(DESeq_res_SIP_byTime_all_df$ASV, .) ->
  Ps_obj_SIP4tree_plot

 
# Remove long name
# tax_table(Ps_obj_SIP4tree_plot)[, "Order"] %<>%  str_replace_all(., "Gammaproteobacteria Incertae Sedis", "Incertae Sedis")

```
Plot heatmap to show the difference between the replicates

```{r}
#| label = "Plot heatmaps",
#| fig.height = 8,
#| fig.width = 10,
#| cache = T

# get top Epi ASVs
DESeq_res_SIP_byTime_all_df %>% 
  filter(Species == "Epibolus pulchripes") %>% 
  arrange(desc(baseMean)) %>% 
  distinct(ASV) %>% 
  slice_head(n = 200) %>% 
  pull(ASV) ->
  top_Epi_ASVs

# make data frame to plot
DESeq_res_SIP_byTime_all_df %>% 
  filter(Species == "Epibolus pulchripes") %>% 
  filter(ASV %in% top_Epi_ASVs) ->
  DESeq_res_SIP_byTime_LFC_sig_Epi_top_df

plot_reps_heatmap(DESeq_res_SIP_byTime_LFC_sig_Epi_top_df, HM_title = "*Epibolus pulchirpes*")

# get top Glo ASVs
DESeq_res_SIP_byTime_all_df %>% 
  filter(Species == "Glomeris connexa") %>% 
  arrange(desc(baseMean)) %>% 
  distinct(ASV) %>% 
  slice_head(n = 200) %>% 
  pull(ASV) ->
  top_Glo_ASVs

# make data frame to plot
DESeq_res_SIP_byTime_all_df %>% 
  filter(Species == "Epibolus pulchripes") %>% 
  filter(ASV %in% top_Glo_ASVs) ->
  DESeq_res_SIP_byTime_LFC_sig_Glo_top_df

plot_reps_heatmap(DESeq_res_SIP_byTime_LFC_sig_Glo_top_df, HM_title = "*Glomeris connexa*")
```

Now plot the phylogenetic trees with heatmaps
```{r}
#| label = "Plot trees with heatmaps",
#| fig.height = 8,
#| fig.width = 10,
#| cache = T

# Define plot grid
taxa2plot <- tibble(rank = c(rep("Class", 4), rep("Phylum", 4)), 
                    subrank = c(rep("Order", 4), rep("Class", 4)), 
                    Taxa2plot = c("Actinobacteria",
                                  "Alphaproteobacteria", 
                                  "Gammaproteobacteria",
                                  "Bacteroidia",
                                  "Desulfobacterota",
                                  "Firmicutes",
                                  "Planctomycetota",
                                  "Verrucomicrobiota"),
                    l_rows = c(4, 5, 6, 3, 4, 4, 4, 4),
                    pwidth = c(5, 6, 8, 3, 4, 4, 4, 4), 
                    pheight = c(rep(10, 8)),)

tree_p_l <- map(seq(nrow(taxa2plot)), 
                ~wrap_ggtree_heatmap(Ps_obj_SIP4tree_plot,
                                     DESeq_res_SIP_byTime_all_df,
                                     rank = taxa2plot$rank[.x],
                                     subrank = taxa2plot$subrank[.x],
                                     Taxa2plot = taxa2plot$Taxa2plot[.x], 
                                     l_rows = 8,
                                     pwidth = 4,
                                     pheight = 10)) 
DESeq_res_SIP_byTime_all_df %>% 
  left_join(rownames_to_column(as(tax_table(Ps_obj_SIP4tree_plot), "data.frame"), "ASV"), by = "ASV") %>% 
  write_tsv(., file = "DESeq2_byTime_a-0.051_wTax.tsv")
  
trees2display <- list.files(path = paste0(fig.path), 
                    pattern = "^Tree_HM_(.*).png$",
                    full.names = TRUE)

knitr::include_graphics(trees2display)

# all_trees <- ((tree_p_l[[1]] | tree_p_l[[2]] + guides(fill = FALSE) | tree_p_l[[3]] + guides(fill = FALSE) | tree_p_l[[4]] + guides(fill = FALSE)) / (tree_p_l[[5]] | plot_spacer())) + plot_layout(heights = c(2, 1))
# 
# save_figure(paste0(fig.path, "all_trees"), 
#             all_trees, 
#             pwidth = 16, 
#             pheight = 18,
#             dpi = 900)
```

#### How abundant were the labelled ASVs?
```{r labelled ASV abundance, cache=T}
Ps_obj_SIP %>% 
  transform_sample_counts(function(x) {x/sum(x)}) %>% 
  prune_taxa(filter(DESeq_res_SIP_byTime_LFC_sig_prev_df, Species == "Epibolus pulchripes")$ASV, .) %>%
  subset_samples(Species == "Epibolus pulchripes" & Group == "LabelledHeavy") -> 
  Ps_obj_SIP_EP

Ps_obj_SIP_EP %>% 
  otu_table() %>% 
  as(., "matrix") %>% 
  rowSums() %>% 
  data.frame(Total = .) %>% 
  rownames_to_column("sample_ID") %>% 
  full_join(rownames_to_column(get_variable(Ps_obj_SIP_EP), "sample_ID"), ., by = "sample_ID") %>% 
  filter(`Label..13C.` == "Labelled") %>% 
  select(Species, Day, Total) %>% 
  group_by(Species, Day) %>% 
  summarise_if(is.numeric, mean) ->
  EP

  Ps_obj_SIP %>% 
  transform_sample_counts(function(x) {x/sum(x)}) %>% 
  prune_taxa(filter(DESeq_res_SIP_byTime_LFC_sig_prev_df, Species == "Glomeris connexa")$ASV, .) %>% 
  subset_samples(Species == "Glomeris connexa") -> 
  Ps_obj_SIP_GC

Ps_obj_SIP_GC %>% 
  otu_table() %>% 
  as(., "matrix") %>% 
  rowSums() %>% 
  data.frame(Total = .) %>% 
  rownames_to_column("sample_ID") %>% 
  full_join(rownames_to_column(get_variable(Ps_obj_SIP_GC), "sample_ID"), ., by = "sample_ID") %>% 
  filter(`Label..13C.` == "Labelled") %>% 
  select(Species, Day, Total) %>% 
  group_by(Species, Day) %>% 
  summarise_if(is.numeric, mean) ->
  GC


  bind_rows(EP, GC) %>% 
  kable(., digits = c(3)) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), 
                full_width = F)
```



```{r}
#| label = "colophon",
#| eval = T
sessioninfo::session_info() %>%
  details::details(
    summary = 'Current session info',
    open    = TRUE
 )
```

## References

